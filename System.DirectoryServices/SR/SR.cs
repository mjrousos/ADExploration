// Do not edit this file manually it is auto-generated during the build based on the .resx file for this project.
namespace System
{
    internal static partial class SR
    {
#pragma warning disable 0414
        private const string s_resourcesName = "FxResources.System.DirectoryServices.SR";
#pragma warning restore 0414

#if !DEBUGRESOURCES
        internal static string DSDoesNotImplementIADs {
              get { return SR.GetResourceString("DSDoesNotImplementIADs", null); }
        }
        internal static string DSNoObject {
              get { return SR.GetResourceString("DSNoObject", null); }
        }
        internal static string DSInvalidPath {
              get { return SR.GetResourceString("DSInvalidPath", null); }
        }
        internal static string DSNotAContainer {
              get { return SR.GetResourceString("DSNotAContainer", null); }
        }
        internal static string DSCannotDelete {
              get { return SR.GetResourceString("DSCannotDelete", null); }
        }
        internal static string DSNotInCollection {
              get { return SR.GetResourceString("DSNotInCollection", null); }
        }
        internal static string DSNoCurrentChild {
              get { return SR.GetResourceString("DSNoCurrentChild", null); }
        }
        internal static string DSCannotBeIndexed {
              get { return SR.GetResourceString("DSCannotBeIndexed", null); }
        }
        internal static string DSCannotCount {
              get { return SR.GetResourceString("DSCannotCount", null); }
        }
        internal static string DSCannotGetKeys {
              get { return SR.GetResourceString("DSCannotGetKeys", null); }
        }
        internal static string DSCannotEmunerate {
              get { return SR.GetResourceString("DSCannotEmunerate", null); }
        }
        internal static string DSNoCurrentProperty {
              get { return SR.GetResourceString("DSNoCurrentProperty", null); }
        }
        internal static string DSNoCurrentValue {
              get { return SR.GetResourceString("DSNoCurrentValue", null); }
        }
        internal static string DSBadPageSize {
              get { return SR.GetResourceString("DSBadPageSize", null); }
        }
        internal static string DSBadSizeLimit {
              get { return SR.GetResourceString("DSBadSizeLimit", null); }
        }
        internal static string DSSearchUnsupported {
              get { return SR.GetResourceString("DSSearchUnsupported", null); }
        }
        internal static string DSNoCurrentEntry {
              get { return SR.GetResourceString("DSNoCurrentEntry", null); }
        }
        internal static string DSInvalidSearchFilter {
              get { return SR.GetResourceString("DSInvalidSearchFilter", null); }
        }
        internal static string DSPropertyNotFound {
              get { return SR.GetResourceString("DSPropertyNotFound", null); }
        }
        internal static string DSConvertFailed {
              get { return SR.GetResourceString("DSConvertFailed", null); }
        }
        internal static string DSConvertTypeInvalid {
              get { return SR.GetResourceString("DSConvertTypeInvalid", null); }
        }
        internal static string DSAdsvalueTypeNYI {
              get { return SR.GetResourceString("DSAdsvalueTypeNYI", null); }
        }
        internal static string DSAdsiNotInstalled {
              get { return SR.GetResourceString("DSAdsiNotInstalled", null); }
        }
        internal static string DSNotSet {
              get { return SR.GetResourceString("DSNotSet", null); }
        }
        internal static string DSEnumerator {
              get { return SR.GetResourceString("DSEnumerator", null); }
        }
        internal static string DSPathIsNotSet {
              get { return SR.GetResourceString("DSPathIsNotSet", null); }
        }
        internal static string DSPropertySetSupported {
              get { return SR.GetResourceString("DSPropertySetSupported", null); }
        }
        internal static string DSAddNotSupported {
              get { return SR.GetResourceString("DSAddNotSupported", null); }
        }
        internal static string DSClearNotSupported {
              get { return SR.GetResourceString("DSClearNotSupported", null); }
        }
        internal static string DSRemoveNotSupported {
              get { return SR.GetResourceString("DSRemoveNotSupported", null); }
        }
        internal static string DSSearchPreferencesNotAccepted {
              get { return SR.GetResourceString("DSSearchPreferencesNotAccepted", null); }
        }
        internal static string DSBeforeCount {
              get { return SR.GetResourceString("DSBeforeCount", null); }
        }
        internal static string DSBadBeforeCount {
              get { return SR.GetResourceString("DSBadBeforeCount", null); }
        }
        internal static string DSAfterCount {
              get { return SR.GetResourceString("DSAfterCount", null); }
        }
        internal static string DSBadAfterCount {
              get { return SR.GetResourceString("DSBadAfterCount", null); }
        }
        internal static string DSOffset {
              get { return SR.GetResourceString("DSOffset", null); }
        }
        internal static string DSBadOffset {
              get { return SR.GetResourceString("DSBadOffset", null); }
        }
        internal static string DSTargetPercentage {
              get { return SR.GetResourceString("DSTargetPercentage", null); }
        }
        internal static string DSBadTargetPercentage {
              get { return SR.GetResourceString("DSBadTargetPercentage", null); }
        }
        internal static string DSTarget {
              get { return SR.GetResourceString("DSTarget", null); }
        }
        internal static string DSApproximateTotal {
              get { return SR.GetResourceString("DSApproximateTotal", null); }
        }
        internal static string DSBadApproximateTotal {
              get { return SR.GetResourceString("DSBadApproximateTotal", null); }
        }
        internal static string DSDirectoryVirtualListViewContext {
              get { return SR.GetResourceString("DSDirectoryVirtualListViewContext", null); }
        }
        internal static string DSVirtualListView {
              get { return SR.GetResourceString("DSVirtualListView", null); }
        }
        internal static string DSBadPageSizeDirsync {
              get { return SR.GetResourceString("DSBadPageSizeDirsync", null); }
        }
        internal static string DSBadCacheResultsVLV {
              get { return SR.GetResourceString("DSBadCacheResultsVLV", null); }
        }
        internal static string DSBadDirectorySynchronizationFlag {
              get { return SR.GetResourceString("DSBadDirectorySynchronizationFlag", null); }
        }
        internal static string DSBadASQSearchScope {
              get { return SR.GetResourceString("DSBadASQSearchScope", null); }
        }
        internal static string DSDoesNotImplementIADsObjectOptions {
              get { return SR.GetResourceString("DSDoesNotImplementIADsObjectOptions", null); }
        }
        internal static string DSPropertyValueSupportOneOperation {
              get { return SR.GetResourceString("DSPropertyValueSupportOneOperation", null); }
        }
        internal static string ConfigSectionsUnique {
              get { return SR.GetResourceString("ConfigSectionsUnique", null); }
        }
        internal static string Invalid_boolean_attribute {
              get { return SR.GetResourceString("Invalid_boolean_attribute", null); }
        }
        internal static string DSUnknownFailure {
              get { return SR.GetResourceString("DSUnknownFailure", null); }
        }
        internal static string DSNotSupportOnClient {
              get { return SR.GetResourceString("DSNotSupportOnClient", null); }
        }
        internal static string DSNotSupportOnDC {
              get { return SR.GetResourceString("DSNotSupportOnDC", null); }
        }
        internal static string DirectoryContextNeedHost {
              get { return SR.GetResourceString("DirectoryContextNeedHost", null); }
        }
        internal static string DSSyncAllFailure {
              get { return SR.GetResourceString("DSSyncAllFailure", null); }
        }
        internal static string UnknownTransport {
              get { return SR.GetResourceString("UnknownTransport", null); }
        }
        internal static string NotSupportTransportSMTP {
              get { return SR.GetResourceString("NotSupportTransportSMTP", null); }
        }
        internal static string CannotDelete {
              get { return SR.GetResourceString("CannotDelete", null); }
        }
        internal static string CannotGetObject {
              get { return SR.GetResourceString("CannotGetObject", null); }
        }
        internal static string DSNotFound {
              get { return SR.GetResourceString("DSNotFound", null); }
        }
        internal static string InvalidContextTarget {
              get { return SR.GetResourceString("InvalidContextTarget", null); }
        }
        internal static string TransportNotFound {
              get { return SR.GetResourceString("TransportNotFound", null); }
        }
        internal static string SiteNotExist {
              get { return SR.GetResourceString("SiteNotExist", null); }
        }
        internal static string SiteNotCommitted {
              get { return SR.GetResourceString("SiteNotCommitted", null); }
        }
        internal static string NoCurrentSite {
              get { return SR.GetResourceString("NoCurrentSite", null); }
        }
        internal static string SubnetNotCommitted {
              get { return SR.GetResourceString("SubnetNotCommitted", null); }
        }
        internal static string SiteLinkNotCommitted {
              get { return SR.GetResourceString("SiteLinkNotCommitted", null); }
        }
        internal static string ConnectionNotCommitted {
              get { return SR.GetResourceString("ConnectionNotCommitted", null); }
        }
        internal static string AlreadyExistingForestTrust {
              get { return SR.GetResourceString("AlreadyExistingForestTrust", null); }
        }
        internal static string AlreadyExistingDomainTrust {
              get { return SR.GetResourceString("AlreadyExistingDomainTrust", null); }
        }
        internal static string NotFoundInCollection {
              get { return SR.GetResourceString("NotFoundInCollection", null); }
        }
        internal static string AlreadyExistingInCollection {
              get { return SR.GetResourceString("AlreadyExistingInCollection", null); }
        }
        internal static string NTDSSiteSetting {
              get { return SR.GetResourceString("NTDSSiteSetting", null); }
        }
        internal static string NotWithinSite {
              get { return SR.GetResourceString("NotWithinSite", null); }
        }
        internal static string InvalidTime {
              get { return SR.GetResourceString("InvalidTime", null); }
        }
        internal static string UnableToRetrieveDomainInfo {
              get { return SR.GetResourceString("UnableToRetrieveDomainInfo", null); }
        }
        internal static string UnableToOpenToken {
              get { return SR.GetResourceString("UnableToOpenToken", null); }
        }
        internal static string UnableToRetrieveTokenInfo {
              get { return SR.GetResourceString("UnableToRetrieveTokenInfo", null); }
        }
        internal static string UnableToRetrievePolicy {
              get { return SR.GetResourceString("UnableToRetrievePolicy", null); }
        }
        internal static string UpdateAvailableRIDPoolOverflowFailure {
              get { return SR.GetResourceString("UpdateAvailableRIDPoolOverflowFailure", null); }
        }
        internal static string EmptyStringParameter {
              get { return SR.GetResourceString("EmptyStringParameter", null); }
        }
        internal static string SupportedPlatforms {
              get { return SR.GetResourceString("SupportedPlatforms", null); }
        }
        internal static string TargetShouldBeADAMServer {
              get { return SR.GetResourceString("TargetShouldBeADAMServer", null); }
        }
        internal static string TargetShouldBeDC {
              get { return SR.GetResourceString("TargetShouldBeDC", null); }
        }
        internal static string TargetShouldBeAppNCDnsName {
              get { return SR.GetResourceString("TargetShouldBeAppNCDnsName", null); }
        }
        internal static string TargetShouldBeServerORForest {
              get { return SR.GetResourceString("TargetShouldBeServerORForest", null); }
        }
        internal static string TargetShouldBeServerORDomain {
              get { return SR.GetResourceString("TargetShouldBeServerORDomain", null); }
        }
        internal static string TargetShouldBeDomain {
              get { return SR.GetResourceString("TargetShouldBeDomain", null); }
        }
        internal static string TargetShouldBeForest {
              get { return SR.GetResourceString("TargetShouldBeForest", null); }
        }
        internal static string TargetShouldBeConfigSet {
              get { return SR.GetResourceString("TargetShouldBeConfigSet", null); }
        }
        internal static string TargetShouldBeServerORConfigSet {
              get { return SR.GetResourceString("TargetShouldBeServerORConfigSet", null); }
        }
        internal static string TargetShouldBeGC {
              get { return SR.GetResourceString("TargetShouldBeGC", null); }
        }
        internal static string TargetShouldBeServer {
              get { return SR.GetResourceString("TargetShouldBeServer", null); }
        }
        internal static string NotADOrADAM {
              get { return SR.GetResourceString("NotADOrADAM", null); }
        }
        internal static string ServerNotAReplica {
              get { return SR.GetResourceString("ServerNotAReplica", null); }
        }
        internal static string AppNCNotFound {
              get { return SR.GetResourceString("AppNCNotFound", null); }
        }
        internal static string ReplicaNotFound {
              get { return SR.GetResourceString("ReplicaNotFound", null); }
        }
        internal static string GCNotFoundInForest {
              get { return SR.GetResourceString("GCNotFoundInForest", null); }
        }
        internal static string DCNotFoundInDomain {
              get { return SR.GetResourceString("DCNotFoundInDomain", null); }
        }
        internal static string ADAMInstanceNotFoundInConfigSet {
              get { return SR.GetResourceString("ADAMInstanceNotFoundInConfigSet", null); }
        }
        internal static string DCNotFound {
              get { return SR.GetResourceString("DCNotFound", null); }
        }
        internal static string GCNotFound {
              get { return SR.GetResourceString("GCNotFound", null); }
        }
        internal static string AINotFound {
              get { return SR.GetResourceString("AINotFound", null); }
        }
        internal static string ServerNotFound {
              get { return SR.GetResourceString("ServerNotFound", null); }
        }
        internal static string DomainNotFound {
              get { return SR.GetResourceString("DomainNotFound", null); }
        }
        internal static string ForestNotFound {
              get { return SR.GetResourceString("ForestNotFound", null); }
        }
        internal static string ConfigSetNotFound {
              get { return SR.GetResourceString("ConfigSetNotFound", null); }
        }
        internal static string NDNCNotFound {
              get { return SR.GetResourceString("NDNCNotFound", null); }
        }
        internal static string PropertyNotFoundOnObject {
              get { return SR.GetResourceString("PropertyNotFoundOnObject", null); }
        }
        internal static string PropertyNotFound {
              get { return SR.GetResourceString("PropertyNotFound", null); }
        }
        internal static string PropertyNotSet {
              get { return SR.GetResourceString("PropertyNotSet", null); }
        }
        internal static string ADAMInstanceNotFound {
              get { return SR.GetResourceString("ADAMInstanceNotFound", null); }
        }
        internal static string CannotPerformOperationOnUncommittedObject {
              get { return SR.GetResourceString("CannotPerformOperationOnUncommittedObject", null); }
        }
        internal static string LinkIdNotEvenNumber {
              get { return SR.GetResourceString("LinkIdNotEvenNumber", null); }
        }
        internal static string InvalidServerNameFormat {
              get { return SR.GetResourceString("InvalidServerNameFormat", null); }
        }
        internal static string NoObjectClassForADPartition {
              get { return SR.GetResourceString("NoObjectClassForADPartition", null); }
        }
        internal static string InvalidDNFormat {
              get { return SR.GetResourceString("InvalidDNFormat", null); }
        }
        internal static string InvalidDnsName {
              get { return SR.GetResourceString("InvalidDnsName", null); }
        }
        internal static string ApplicationPartitionTypeUnknown {
              get { return SR.GetResourceString("ApplicationPartitionTypeUnknown", null); }
        }
        internal static string UnknownSyntax {
              get { return SR.GetResourceString("UnknownSyntax", null); }
        }
        internal static string InvalidMode {
              get { return SR.GetResourceString("InvalidMode", null); }
        }
        internal static string NoW2K3DCs {
              get { return SR.GetResourceString("NoW2K3DCs", null); }
        }
        internal static string DCInfoNotFound {
              get { return SR.GetResourceString("DCInfoNotFound", null); }
        }
        internal static string NoW2K3DCsInForest {
              get { return SR.GetResourceString("NoW2K3DCsInForest", null); }
        }
        internal static string SchemaObjectNotCommitted {
              get { return SR.GetResourceString("SchemaObjectNotCommitted", null); }
        }
        internal static string InvalidFlags {
              get { return SR.GetResourceString("InvalidFlags", null); }
        }
        internal static string CannotPerformOnGCObject {
              get { return SR.GetResourceString("CannotPerformOnGCObject", null); }
        }
        internal static string CannotPerformOnGC {
              get { return SR.GetResourceString("CannotPerformOnGC", null); }
        }
        internal static string ValueCannotBeModified {
              get { return SR.GetResourceString("ValueCannotBeModified", null); }
        }
        internal static string ServerShouldBeW2K3 {
              get { return SR.GetResourceString("ServerShouldBeW2K3", null); }
        }
        internal static string LinkedPropertyNotFound {
              get { return SR.GetResourceString("LinkedPropertyNotFound", null); }
        }
        internal static string GCDisabled {
              get { return SR.GetResourceString("GCDisabled", null); }
        }
        internal static string PropertyInvalidForADAM {
              get { return SR.GetResourceString("PropertyInvalidForADAM", null); }
        }
        internal static string OperationInvalidForADAM {
              get { return SR.GetResourceString("OperationInvalidForADAM", null); }
        }
        internal static string ContextNotAssociatedWithDomain {
              get { return SR.GetResourceString("ContextNotAssociatedWithDomain", null); }
        }
        internal static string ComputerNotJoinedToDomain {
              get { return SR.GetResourceString("ComputerNotJoinedToDomain", null); }
        }
        internal static string VersionFailure {
              get { return SR.GetResourceString("VersionFailure", null); }
        }
        internal static string NoHostName {
              get { return SR.GetResourceString("NoHostName", null); }
        }
        internal static string NoHostNameOrPortNumber {
              get { return SR.GetResourceString("NoHostNameOrPortNumber", null); }
        }
        internal static string NTAuthority {
              get { return SR.GetResourceString("NTAuthority", null); }
        }
        internal static string Name {
              get { return SR.GetResourceString("Name", null); }
        }
        internal static string OneLevelPartitionNotSupported {
              get { return SR.GetResourceString("OneLevelPartitionNotSupported", null); }
        }
        internal static string SiteNameNotFound {
              get { return SR.GetResourceString("SiteNameNotFound", null); }
        }
        internal static string SiteObjectNameNotFound {
              get { return SR.GetResourceString("SiteObjectNameNotFound", null); }
        }
        internal static string ComputerObjectNameNotFound {
              get { return SR.GetResourceString("ComputerObjectNameNotFound", null); }
        }
        internal static string ServerObjectNameNotFound {
              get { return SR.GetResourceString("ServerObjectNameNotFound", null); }
        }
        internal static string NtdsaObjectNameNotFound {
              get { return SR.GetResourceString("NtdsaObjectNameNotFound", null); }
        }
        internal static string NtdsaObjectGuidNotFound {
              get { return SR.GetResourceString("NtdsaObjectGuidNotFound", null); }
        }
        internal static string OnlyDomainOrForest {
              get { return SR.GetResourceString("OnlyDomainOrForest", null); }
        }
        internal static string ServerShouldBeDC {
              get { return SR.GetResourceString("ServerShouldBeDC", null); }
        }
        internal static string ServerShouldBeAI {
              get { return SR.GetResourceString("ServerShouldBeAI", null); }
        }
        internal static string CannotModifySacl {
              get { return SR.GetResourceString("CannotModifySacl", null); }
        }
        internal static string CannotModifyDacl {
              get { return SR.GetResourceString("CannotModifyDacl", null); }
        }
        internal static string ForestTrustCollision {
              get { return SR.GetResourceString("ForestTrustCollision", null); }
        }
        internal static string ForestTrustDoesNotExist {
              get { return SR.GetResourceString("ForestTrustDoesNotExist", null); }
        }
        internal static string DomainTrustDoesNotExist {
              get { return SR.GetResourceString("DomainTrustDoesNotExist", null); }
        }
        internal static string WrongForestTrust {
              get { return SR.GetResourceString("WrongForestTrust", null); }
        }
        internal static string WrongTrustDirection {
              get { return SR.GetResourceString("WrongTrustDirection", null); }
        }
        internal static string NT4NotSupported {
              get { return SR.GetResourceString("NT4NotSupported", null); }
        }
        internal static string KerberosNotSupported {
              get { return SR.GetResourceString("KerberosNotSupported", null); }
        }
        internal static string DSPropertyListUnsupported {
              get { return SR.GetResourceString("DSPropertyListUnsupported", null); }
        }
        internal static string DSMultipleSDNotSupported {
              get { return SR.GetResourceString("DSMultipleSDNotSupported", null); }
        }
        internal static string DSSDNoValues {
              get { return SR.GetResourceString("DSSDNoValues", null); }
        }
        internal static string ConnectionSourcServerShouldBeDC {
              get { return SR.GetResourceString("ConnectionSourcServerShouldBeDC", null); }
        }
        internal static string ConnectionSourcServerShouldBeADAM {
              get { return SR.GetResourceString("ConnectionSourcServerShouldBeADAM", null); }
        }
        internal static string ConnectionSourcServerSameForest {
              get { return SR.GetResourceString("ConnectionSourcServerSameForest", null); }
        }
        internal static string ConnectionSourcServerSameConfigSet {
              get { return SR.GetResourceString("ConnectionSourcServerSameConfigSet", null); }
        }
        internal static string TrustVerificationNotSupport {
              get { return SR.GetResourceString("TrustVerificationNotSupport", null); }
        }
        internal static string DSChildren {
              get { return SR.GetResourceString("DSChildren", null); }
        }
        internal static string DSGuid {
              get { return SR.GetResourceString("DSGuid", null); }
        }
        internal static string DSName {
              get { return SR.GetResourceString("DSName", null); }
        }
        internal static string DSNativeObject {
              get { return SR.GetResourceString("DSNativeObject", null); }
        }
        internal static string DSParent {
              get { return SR.GetResourceString("DSParent", null); }
        }
        internal static string DSPassword {
              get { return SR.GetResourceString("DSPassword", null); }
        }
        internal static string DSPath {
              get { return SR.GetResourceString("DSPath", null); }
        }
        internal static string DSProperties {
              get { return SR.GetResourceString("DSProperties", null); }
        }
        internal static string DSSchemaClassName {
              get { return SR.GetResourceString("DSSchemaClassName", null); }
        }
        internal static string DSSchemaEntry {
              get { return SR.GetResourceString("DSSchemaEntry", null); }
        }
        internal static string DSUsePropertyCache {
              get { return SR.GetResourceString("DSUsePropertyCache", null); }
        }
        internal static string DSUsername {
              get { return SR.GetResourceString("DSUsername", null); }
        }
        internal static string DSAuthenticationType {
              get { return SR.GetResourceString("DSAuthenticationType", null); }
        }
        internal static string DSNativeGuid {
              get { return SR.GetResourceString("DSNativeGuid", null); }
        }
        internal static string DSCacheResults {
              get { return SR.GetResourceString("DSCacheResults", null); }
        }
        internal static string DSClientTimeout {
              get { return SR.GetResourceString("DSClientTimeout", null); }
        }
        internal static string DSPropertyNamesOnly {
              get { return SR.GetResourceString("DSPropertyNamesOnly", null); }
        }
        internal static string DSFilter {
              get { return SR.GetResourceString("DSFilter", null); }
        }
        internal static string DSPageSize {
              get { return SR.GetResourceString("DSPageSize", null); }
        }
        internal static string DSPropertiesToLoad {
              get { return SR.GetResourceString("DSPropertiesToLoad", null); }
        }
        internal static string DSReferralChasing {
              get { return SR.GetResourceString("DSReferralChasing", null); }
        }
        internal static string DSSearchScope {
              get { return SR.GetResourceString("DSSearchScope", null); }
        }
        internal static string DSServerPageTimeLimit {
              get { return SR.GetResourceString("DSServerPageTimeLimit", null); }
        }
        internal static string DSServerTimeLimit {
              get { return SR.GetResourceString("DSServerTimeLimit", null); }
        }
        internal static string DSSizeLimit {
              get { return SR.GetResourceString("DSSizeLimit", null); }
        }
        internal static string DSSearchRoot {
              get { return SR.GetResourceString("DSSearchRoot", null); }
        }
        internal static string DSSort {
              get { return SR.GetResourceString("DSSort", null); }
        }
        internal static string DSSortName {
              get { return SR.GetResourceString("DSSortName", null); }
        }
        internal static string DSSortDirection {
              get { return SR.GetResourceString("DSSortDirection", null); }
        }
        internal static string DSAsynchronous {
              get { return SR.GetResourceString("DSAsynchronous", null); }
        }
        internal static string DSTombstone {
              get { return SR.GetResourceString("DSTombstone", null); }
        }
        internal static string DSAttributeQuery {
              get { return SR.GetResourceString("DSAttributeQuery", null); }
        }
        internal static string DSDerefAlias {
              get { return SR.GetResourceString("DSDerefAlias", null); }
        }
        internal static string DSSecurityMasks {
              get { return SR.GetResourceString("DSSecurityMasks", null); }
        }
        internal static string DSExtendedDn {
              get { return SR.GetResourceString("DSExtendedDn", null); }
        }
        internal static string DSDirectorySynchronizationFlag {
              get { return SR.GetResourceString("DSDirectorySynchronizationFlag", null); }
        }
        internal static string DSDirectorySynchronizationCookie {
              get { return SR.GetResourceString("DSDirectorySynchronizationCookie", null); }
        }
        internal static string DSDirectorySynchronization {
              get { return SR.GetResourceString("DSDirectorySynchronization", null); }
        }
        internal static string DSUnknown {
              get { return SR.GetResourceString("DSUnknown", null); }
        }
        internal static string DSOptions {
              get { return SR.GetResourceString("DSOptions", null); }
        }
        internal static string DSObjectSecurity {
              get { return SR.GetResourceString("DSObjectSecurity", null); }
        }
        internal static string DirectoryEntryDesc {
              get { return SR.GetResourceString("DirectoryEntryDesc", null); }
        }
        internal static string DirectorySearcherDesc {
              get { return SR.GetResourceString("DirectorySearcherDesc", null); }
        }
        internal static string OnlyAllowSingleDimension {
              get { return SR.GetResourceString("OnlyAllowSingleDimension", null); }
        }
        internal static string LessThanZero {
              get { return SR.GetResourceString("LessThanZero", null); }
        }
        internal static string DestinationArrayNotLargeEnough {
              get { return SR.GetResourceString("DestinationArrayNotLargeEnough", null); }
        }
        internal static string NoNegativeTime {
              get { return SR.GetResourceString("NoNegativeTime", null); }
        }
        internal static string ReplicationIntervalExceedMax {
              get { return SR.GetResourceString("ReplicationIntervalExceedMax", null); }
        }
        internal static string ReplicationIntervalInMinutes {
              get { return SR.GetResourceString("ReplicationIntervalInMinutes", null); }
        }
        internal static string TimespanExceedMax {
              get { return SR.GetResourceString("TimespanExceedMax", null); }
        }
#else
        internal static string DSDoesNotImplementIADs {
              get { return SR.GetResourceString("DSDoesNotImplementIADs", @"The value provided for adsObject does not implement IADs."); }
        }
        internal static string DSNoObject {
              get { return SR.GetResourceString("DSNoObject", @"There is no such object on the server."); }
        }
        internal static string DSInvalidPath {
              get { return SR.GetResourceString("DSInvalidPath", @"The path is invalid."); }
        }
        internal static string DSNotAContainer {
              get { return SR.GetResourceString("DSNotAContainer", @"The Active Directory object located at the path {0} is not a container."); }
        }
        internal static string DSCannotDelete {
              get { return SR.GetResourceString("DSCannotDelete", @"The object cannot be deleted."); }
        }
        internal static string DSNotInCollection {
              get { return SR.GetResourceString("DSNotInCollection", @"The given child object cannot be found in the collection."); }
        }
        internal static string DSNoCurrentChild {
              get { return SR.GetResourceString("DSNoCurrentChild", @"There is no current child object."); }
        }
        internal static string DSCannotBeIndexed {
              get { return SR.GetResourceString("DSCannotBeIndexed", @"The entry properties cannot be indexed by number."); }
        }
        internal static string DSCannotCount {
              get { return SR.GetResourceString("DSCannotCount", @"The directory cannot report the number of properties."); }
        }
        internal static string DSCannotGetKeys {
              get { return SR.GetResourceString("DSCannotGetKeys", @"The directory cannot report the names of available properties."); }
        }
        internal static string DSCannotEmunerate {
              get { return SR.GetResourceString("DSCannotEmunerate", @"The entry properties cannot be enumerated. Consider using the entry schema to determine what properties are available."); }
        }
        internal static string DSNoCurrentProperty {
              get { return SR.GetResourceString("DSNoCurrentProperty", @"No current property exists."); }
        }
        internal static string DSNoCurrentValue {
              get { return SR.GetResourceString("DSNoCurrentValue", @"No current value is available."); }
        }
        internal static string DSBadPageSize {
              get { return SR.GetResourceString("DSBadPageSize", @"The PageSize must be greater than 0 or set to 0 for no paging."); }
        }
        internal static string DSBadSizeLimit {
              get { return SR.GetResourceString("DSBadSizeLimit", @"SizeLimit must be greater than or equal to 0."); }
        }
        internal static string DSSearchUnsupported {
              get { return SR.GetResourceString("DSSearchUnsupported", @"The provider does not support searching and cannot search {0}."); }
        }
        internal static string DSNoCurrentEntry {
              get { return SR.GetResourceString("DSNoCurrentEntry", @"No current entry exists."); }
        }
        internal static string DSInvalidSearchFilter {
              get { return SR.GetResourceString("DSInvalidSearchFilter", @"The {0} search filter is invalid."); }
        }
        internal static string DSPropertyNotFound {
              get { return SR.GetResourceString("DSPropertyNotFound", @"The property {0} cannot be found in the search results. The property might not exist on the found object, or it might not have been requested in the search query through"); }
        }
        internal static string DSConvertFailed {
              get { return SR.GetResourceString("DSConvertFailed", @"The ADSVALUE with the union value {0} cannot be converted to the ADSTYPEENUM type {1}."); }
        }
        internal static string DSConvertTypeInvalid {
              get { return SR.GetResourceString("DSConvertTypeInvalid", @"ADSVALUE type is invalid."); }
        }
        internal static string DSAdsvalueTypeNYI {
              get { return SR.GetResourceString("DSAdsvalueTypeNYI", @"Handling of this ADSVALUE type is not yet implemented (type = {0})."); }
        }
        internal static string DSAdsiNotInstalled {
              get { return SR.GetResourceString("DSAdsiNotInstalled", @"Active Directory Client is not installed on this computer."); }
        }
        internal static string DSNotSet {
              get { return SR.GetResourceString("DSNotSet", @"[Not Set]"); }
        }
        internal static string DSEnumerator {
              get { return SR.GetResourceString("DSEnumerator", @"Enumerator is positioned before the first item or after the last item."); }
        }
        internal static string DSPathIsNotSet {
              get { return SR.GetResourceString("DSPathIsNotSet", @"Path property is not set."); }
        }
        internal static string DSPropertySetSupported {
              get { return SR.GetResourceString("DSPropertySetSupported", @"New PropertyValueCollection cannot be set into a DirectoryEntry PropertyCollection."); }
        }
        internal static string DSAddNotSupported {
              get { return SR.GetResourceString("DSAddNotSupported", @"New properties cannot be added to a DirectoryEntry PropertyCollection."); }
        }
        internal static string DSClearNotSupported {
              get { return SR.GetResourceString("DSClearNotSupported", @"DirectoryEntry PropertyCollection cannot be cleared."); }
        }
        internal static string DSRemoveNotSupported {
              get { return SR.GetResourceString("DSRemoveNotSupported", @"Properties cannot be removed from a DirectoryEntry PropertyCollection."); }
        }
        internal static string DSSearchPreferencesNotAccepted {
              get { return SR.GetResourceString("DSSearchPreferencesNotAccepted", @"The value for the property {0} cannot be set."); }
        }
        internal static string DSBeforeCount {
              get { return SR.GetResourceString("DSBeforeCount", @"Indicates the number of entries, before the target entry, that the client is requesting from the server. "); }
        }
        internal static string DSBadBeforeCount {
              get { return SR.GetResourceString("DSBadBeforeCount", @"BeforeCount must be greater than or equal to 0."); }
        }
        internal static string DSAfterCount {
              get { return SR.GetResourceString("DSAfterCount", @"Indicates the number of entries, after the target entry, that the client is requesting from the server. "); }
        }
        internal static string DSBadAfterCount {
              get { return SR.GetResourceString("DSBadAfterCount", @"AfterCount must be greater than or equal to 0."); }
        }
        internal static string DSOffset {
              get { return SR.GetResourceString("DSOffset", @"On input, indicates the target entry requested offset within the list. On output, indicates the server's best estimate as to the actual offset of the returned target"); }
        }
        internal static string DSBadOffset {
              get { return SR.GetResourceString("DSBadOffset", @"Offset must be greater than or equal to 0."); }
        }
        internal static string DSTargetPercentage {
              get { return SR.GetResourceString("DSTargetPercentage", @"Approximate target percentage in the total returned records."); }
        }
        internal static string DSBadTargetPercentage {
              get { return SR.GetResourceString("DSBadTargetPercentage", @"Target percentage should be in the range of 0 to 100 inclusively."); }
        }
        internal static string DSTarget {
              get { return SR.GetResourceString("DSTarget", @"Indicates the desired target entry requested by the client."); }
        }
        internal static string DSApproximateTotal {
              get { return SR.GetResourceString("DSApproximateTotal", @"The input value represents the client's estimated value for the content count. The output value is the server estimate of the content count."); }
        }
        internal static string DSBadApproximateTotal {
              get { return SR.GetResourceString("DSBadApproximateTotal", @"ApproximateTotal must be greater or equal to 0."); }
        }
        internal static string DSDirectoryVirtualListViewContext {
              get { return SR.GetResourceString("DSDirectoryVirtualListViewContext", @"Indicates the server-generated context identifier."); }
        }
        internal static string DSVirtualListView {
              get { return SR.GetResourceString("DSVirtualListView", @"Specifies that the search should use the LDAP virtual list view (VLV) control."); }
        }
        internal static string DSBadPageSizeDirsync {
              get { return SR.GetResourceString("DSBadPageSizeDirsync", @"DirectorySynchronization cannot be combined with PageSize."); }
        }
        internal static string DSBadCacheResultsVLV {
              get { return SR.GetResourceString("DSBadCacheResultsVLV", @"VirtualListView cannot be combined with CacheResults."); }
        }
        internal static string DSBadDirectorySynchronizationFlag {
              get { return SR.GetResourceString("DSBadDirectorySynchronizationFlag", @"DirectorySynchronization flag must be the value defined in the DirectorySynchronizationFlag class."); }
        }
        internal static string DSBadASQSearchScope {
              get { return SR.GetResourceString("DSBadASQSearchScope", @"When AttributeScopeQuery is specified, only SearchScope.Base is supported."); }
        }
        internal static string DSDoesNotImplementIADsObjectOptions {
              get { return SR.GetResourceString("DSDoesNotImplementIADsObjectOptions", @"This DirectoryEntry object does not support the Options property."); }
        }
        internal static string DSPropertyValueSupportOneOperation {
              get { return SR.GetResourceString("DSPropertyValueSupportOneOperation", @"Only one type of operation can be performed in a sequence."); }
        }
        internal static string ConfigSectionsUnique {
              get { return SR.GetResourceString("ConfigSectionsUnique", @"The '{0}' section can only appear once in a configuration file."); }
        }
        internal static string Invalid_boolean_attribute {
              get { return SR.GetResourceString("Invalid_boolean_attribute", @"The '{0}' attribute must be set to 'true' or 'false'."); }
        }
        internal static string DSUnknownFailure {
              get { return SR.GetResourceString("DSUnknownFailure", @"An unknown error occurred."); }
        }
        internal static string DSNotSupportOnClient {
              get { return SR.GetResourceString("DSNotSupportOnClient", @"This property is only supported on computers running Windows XP and later operating systems."); }
        }
        internal static string DSNotSupportOnDC {
              get { return SR.GetResourceString("DSNotSupportOnDC", @"This property is not supported when targeting Windows Server 2000 domain controllers."); }
        }
        internal static string DirectoryContextNeedHost {
              get { return SR.GetResourceString("DirectoryContextNeedHost", @"The target of the directory context should be an Active Directory domain controller or ADAM instance."); }
        }
        internal static string DSSyncAllFailure {
              get { return SR.GetResourceString("DSSyncAllFailure", @"An error occurred when synchronizing the server."); }
        }
        internal static string UnknownTransport {
              get { return SR.GetResourceString("UnknownTransport", @"""{0}"" is an unknown ActiveDirectoryTransportType."); }
        }
        internal static string NotSupportTransportSMTP {
              get { return SR.GetResourceString("NotSupportTransportSMTP", @"ActiveDirectoryTransportType.Smtp not supported. "); }
        }
        internal static string CannotDelete {
              get { return SR.GetResourceString("CannotDelete", @"The newly created object has not been committed to the backend store, so it cannot be deleted."); }
        }
        internal static string CannotGetObject {
              get { return SR.GetResourceString("CannotGetObject", @"The newly created object has not been committed to the backend store, so GetDirectoryEntry cannot be called."); }
        }
        internal static string DSNotFound {
              get { return SR.GetResourceString("DSNotFound", @"The Specified directory object cannot be found."); }
        }
        internal static string InvalidContextTarget {
              get { return SR.GetResourceString("InvalidContextTarget", @"The target of the directory context is invalid."); }
        }
        internal static string TransportNotFound {
              get { return SR.GetResourceString("TransportNotFound", @"The transport ""{0}"" cannot be found."); }
        }
        internal static string SiteNotExist {
              get { return SR.GetResourceString("SiteNotExist", @"The site ""{0}"" does not exist."); }
        }
        internal static string SiteNotCommitted {
              get { return SR.GetResourceString("SiteNotCommitted", @"The site ""{0}"" is newly created and has not been committed to the backend store."); }
        }
        internal static string NoCurrentSite {
              get { return SR.GetResourceString("NoCurrentSite", @"The computer is not in a site."); }
        }
        internal static string SubnetNotCommitted {
              get { return SR.GetResourceString("SubnetNotCommitted", @"The subnet ""{0}"" is newly created and has not been committed to the backend store."); }
        }
        internal static string SiteLinkNotCommitted {
              get { return SR.GetResourceString("SiteLinkNotCommitted", @"The site link ""{0}"" is newly created and has not been committed to the backend store."); }
        }
        internal static string ConnectionNotCommitted {
              get { return SR.GetResourceString("ConnectionNotCommitted", @"The replication connection ""{0}"" is newly created and has not been committed to the backend store."); }
        }
        internal static string AlreadyExistingForestTrust {
              get { return SR.GetResourceString("AlreadyExistingForestTrust", @"A forest trust relationship exists between ""{0}"" and ""{1}""."); }
        }
        internal static string AlreadyExistingDomainTrust {
              get { return SR.GetResourceString("AlreadyExistingDomainTrust", @"A domain trust relationship exists between ""{0}"" and ""{1}""."); }
        }
        internal static string NotFoundInCollection {
              get { return SR.GetResourceString("NotFoundInCollection", @"Cannot remove ""{0}"". It was not found in the specified collection."); }
        }
        internal static string AlreadyExistingInCollection {
              get { return SR.GetResourceString("AlreadyExistingInCollection", @"Cannot add ""{0}"". It currently exists in the specified collection."); }
        }
        internal static string NTDSSiteSetting {
              get { return SR.GetResourceString("NTDSSiteSetting", @"The site ""{0}"" does not contain a nTDSSiteSettings object."); }
        }
        internal static string NotWithinSite {
              get { return SR.GetResourceString("NotWithinSite", @"This directory server is not in the current site."); }
        }
        internal static string InvalidTime {
              get { return SR.GetResourceString("InvalidTime", @"The end time must be later than the start time."); }
        }
        internal static string UnableToRetrieveDomainInfo {
              get { return SR.GetResourceString("UnableToRetrieveDomainInfo", @"Information about the domain could not be retrieved ({0})."); }
        }
        internal static string UnableToOpenToken {
              get { return SR.GetResourceString("UnableToOpenToken", @"The thread or process token could not be accessed ({0})."); }
        }
        internal static string UnableToRetrieveTokenInfo {
              get { return SR.GetResourceString("UnableToRetrieveTokenInfo", @"Information from the thread token could not be retrieved ({0})."); }
        }
        internal static string UnableToRetrievePolicy {
              get { return SR.GetResourceString("UnableToRetrievePolicy", @"This computer's policy information could not be retrieved ({0})."); }
        }
        internal static string UpdateAvailableRIDPoolOverflowFailure {
              get { return SR.GetResourceString("UpdateAvailableRIDPoolOverflowFailure", @"Failure in updating rIDAvailablePool value. New value exceeds the maximum limit."); }
        }
        internal static string EmptyStringParameter {
              get { return SR.GetResourceString("EmptyStringParameter", @"The specified string parameter is empty."); }
        }
        internal static string SupportedPlatforms {
              get { return SR.GetResourceString("SupportedPlatforms", @"The System.DirectoryServices.ActiveDirectory namespace is only supported on computers running Windows 2000 and later operating systems."); }
        }
        internal static string TargetShouldBeADAMServer {
              get { return SR.GetResourceString("TargetShouldBeADAMServer", @"The name specified in the directory context must be an ADAM instance."); }
        }
        internal static string TargetShouldBeDC {
              get { return SR.GetResourceString("TargetShouldBeDC", @"The name specified in the directory context must be an Active Directory domain controller."); }
        }
        internal static string TargetShouldBeAppNCDnsName {
              get { return SR.GetResourceString("TargetShouldBeAppNCDnsName", @"The name specified in the directory context must be the DNS name of the application partition."); }
        }
        internal static string TargetShouldBeServerORForest {
              get { return SR.GetResourceString("TargetShouldBeServerORForest", @"The name specified in the directory context must be an Active Directory domain controller or a forest."); }
        }
        internal static string TargetShouldBeServerORDomain {
              get { return SR.GetResourceString("TargetShouldBeServerORDomain", @"The name specified in the directory context must be an Active Directory domain controller or a domain."); }
        }
        internal static string TargetShouldBeDomain {
              get { return SR.GetResourceString("TargetShouldBeDomain", @"The name specified in the directory context must be an Active Directory domain."); }
        }
        internal static string TargetShouldBeForest {
              get { return SR.GetResourceString("TargetShouldBeForest", @"The name specified in the directory context must be an Active Directory forest."); }
        }
        internal static string TargetShouldBeConfigSet {
              get { return SR.GetResourceString("TargetShouldBeConfigSet", @"The name specified in the directory context must be an ADAM configuration set."); }
        }
        internal static string TargetShouldBeServerORConfigSet {
              get { return SR.GetResourceString("TargetShouldBeServerORConfigSet", @"The name specified in the directory context must be an ADAM instance or an ADAM configuration set."); }
        }
        internal static string TargetShouldBeGC {
              get { return SR.GetResourceString("TargetShouldBeGC", @"The name specified in the directory context must be a global catalog."); }
        }
        internal static string TargetShouldBeServer {
              get { return SR.GetResourceString("TargetShouldBeServer", @"The name specified in the directory context must be an Active Directory domain controller or an ADAM instance."); }
        }
        internal static string NotADOrADAM {
              get { return SR.GetResourceString("NotADOrADAM", @"The specified name is not a forest, Active Directory domain controller, ADAM instance, or ADAM configuration set."); }
        }
        internal static string ServerNotAReplica {
              get { return SR.GetResourceString("ServerNotAReplica", @"The directory server does not host the specified application partition."); }
        }
        internal static string AppNCNotFound {
              get { return SR.GetResourceString("AppNCNotFound", @"The specified application partition does not exist."); }
        }
        internal static string ReplicaNotFound {
              get { return SR.GetResourceString("ReplicaNotFound", @"A Directory server that hosts the specified application partition not found."); }
        }
        internal static string GCNotFoundInForest {
              get { return SR.GetResourceString("GCNotFoundInForest", @"Global catalog not found in forest ""{0}""."); }
        }
        internal static string DCNotFoundInDomain {
              get { return SR.GetResourceString("DCNotFoundInDomain", @"Domain controller not found in the domain ""{0}""."); }
        }
        internal static string ADAMInstanceNotFoundInConfigSet {
              get { return SR.GetResourceString("ADAMInstanceNotFoundInConfigSet", @"ADAM instance not found in configuration set ""{0}""."); }
        }
        internal static string DCNotFound {
              get { return SR.GetResourceString("DCNotFound", @"Domain controller ""{0}"" does not exist or cannot be contacted."); }
        }
        internal static string GCNotFound {
              get { return SR.GetResourceString("GCNotFound", @"Global catalog ""{0}"" does not exist or cannot be contacted."); }
        }
        internal static string AINotFound {
              get { return SR.GetResourceString("AINotFound", @"ADAM instance ""{0}"" does not exist or cannot be contacted."); }
        }
        internal static string ServerNotFound {
              get { return SR.GetResourceString("ServerNotFound", @"Directory server ""{0}"" does not exist or cannot be contacted."); }
        }
        internal static string DomainNotFound {
              get { return SR.GetResourceString("DomainNotFound", @"The specified domain does not exist or cannot be contacted."); }
        }
        internal static string ForestNotFound {
              get { return SR.GetResourceString("ForestNotFound", @"The specified forest does not exist or cannot be contacted."); }
        }
        internal static string ConfigSetNotFound {
              get { return SR.GetResourceString("ConfigSetNotFound", @"The specified ADAM configuration set does not exist or cannot be contacted."); }
        }
        internal static string NDNCNotFound {
              get { return SR.GetResourceString("NDNCNotFound", @"The specified application partition does not exist or cannot be contacted."); }
        }
        internal static string PropertyNotFoundOnObject {
              get { return SR.GetResourceString("PropertyNotFoundOnObject", @"Property ""{0}"" on object ""{1}"" not found."); }
        }
        internal static string PropertyNotFound {
              get { return SR.GetResourceString("PropertyNotFound", @"Property ""{0}"" not found."); }
        }
        internal static string PropertyNotSet {
              get { return SR.GetResourceString("PropertyNotSet", @"Property ""{0}"" not set."); }
        }
        internal static string ADAMInstanceNotFound {
              get { return SR.GetResourceString("ADAMInstanceNotFound", @"An ADAM instance could not be found."); }
        }
        internal static string CannotPerformOperationOnUncommittedObject {
              get { return SR.GetResourceString("CannotPerformOperationOnUncommittedObject", @"Operation valid only for objects that exist on the backend store."); }
        }
        internal static string LinkIdNotEvenNumber {
              get { return SR.GetResourceString("LinkIdNotEvenNumber", @"Forward linkID must be an even number."); }
        }
        internal static string InvalidServerNameFormat {
              get { return SR.GetResourceString("InvalidServerNameFormat", @"The server object name has an invalid format."); }
        }
        internal static string NoObjectClassForADPartition {
              get { return SR.GetResourceString("NoObjectClassForADPartition", @"Object class must not be specified for Active Directory application partitions."); }
        }
        internal static string InvalidDNFormat {
              get { return SR.GetResourceString("InvalidDNFormat", @"The specified distinguished name has an invalid format."); }
        }
        internal static string InvalidDnsName {
              get { return SR.GetResourceString("InvalidDnsName", @"The specified DNS name has an invalid format."); }
        }
        internal static string ApplicationPartitionTypeUnknown {
              get { return SR.GetResourceString("ApplicationPartitionTypeUnknown", @"Application partition is neither an Active Directory, nor ADAM application partition."); }
        }
        internal static string UnknownSyntax {
              get { return SR.GetResourceString("UnknownSyntax", @"Schema property ""{0}"" has an unknown syntax."); }
        }
        internal static string InvalidMode {
              get { return SR.GetResourceString("InvalidMode", @"The requested mode is invalid."); }
        }
        internal static string NoW2K3DCs {
              get { return SR.GetResourceString("NoW2K3DCs", @"No Windows Server 2003 domain controllers exist in the domain."); }
        }
        internal static string DCInfoNotFound {
              get { return SR.GetResourceString("DCInfoNotFound", @"Domain controller data not found for the specified Active Directory domain controller."); }
        }
        internal static string NoW2K3DCsInForest {
              get { return SR.GetResourceString("NoW2K3DCsInForest", @"No Windows Server 2003 domain controllers exist in the forest."); }
        }
        internal static string SchemaObjectNotCommitted {
              get { return SR.GetResourceString("SchemaObjectNotCommitted", @"The schema object ""{0}"" is newly created and has not been committed to the backend store."); }
        }
        internal static string InvalidFlags {
              get { return SR.GetResourceString("InvalidFlags", @"One or more flags are invalid."); }
        }
        internal static string CannotPerformOnGCObject {
              get { return SR.GetResourceString("CannotPerformOnGCObject", @"Cannot perform this operation on a global catalog object."); }
        }
        internal static string CannotPerformOnGC {
              get { return SR.GetResourceString("CannotPerformOnGC", @"Cannot perform this operation on the GlobalCatalog class."); }
        }
        internal static string ValueCannotBeModified {
              get { return SR.GetResourceString("ValueCannotBeModified", @"The specified value cannot be removed or overwritten. It is inherited from a super class."); }
        }
        internal static string ServerShouldBeW2K3 {
              get { return SR.GetResourceString("ServerShouldBeW2K3", @"The Active Directory domain controller must be running Windows Server 2003 operating system or later."); }
        }
        internal static string LinkedPropertyNotFound {
              get { return SR.GetResourceString("LinkedPropertyNotFound", @"Schema property with link id ""{0}"" not found."); }
        }
        internal static string GCDisabled {
              get { return SR.GetResourceString("GCDisabled", @"Cannot perform this operation on disabled global catalog object."); }
        }
        internal static string PropertyInvalidForADAM {
              get { return SR.GetResourceString("PropertyInvalidForADAM", @"This property is not supported for an ADAM application partition."); }
        }
        internal static string OperationInvalidForADAM {
              get { return SR.GetResourceString("OperationInvalidForADAM", @"This operation is not supported for an ADAM application partition."); }
        }
        internal static string ContextNotAssociatedWithDomain {
              get { return SR.GetResourceString("ContextNotAssociatedWithDomain", @"Current security context is not associated with an Active Directory domain or forest."); }
        }
        internal static string ComputerNotJoinedToDomain {
              get { return SR.GetResourceString("ComputerNotJoinedToDomain", @"The local computer is not joined to a domain or the domain cannot be contacted."); }
        }
        internal static string VersionFailure {
              get { return SR.GetResourceString("VersionFailure", @"Failed to get the version of the operating system, error is ""{0}""."); }
        }
        internal static string NoHostName {
              get { return SR.GetResourceString("NoHostName", @"Unable to obtain DNS hostname of Active Directory domain controller with ntdsa object name ""{0}""."); }
        }
        internal static string NoHostNameOrPortNumber {
              get { return SR.GetResourceString("NoHostNameOrPortNumber", @"Unable to obtain DNS hostname or port number of ADAM instance with ntdsa object name ""{0}""."); }
        }
        internal static string NTAuthority {
              get { return SR.GetResourceString("NTAuthority", @"NT AUTHORITY"); }
        }
        internal static string Name {
              get { return SR.GetResourceString("Name", @"Name: ""{0}"""); }
        }
        internal static string OneLevelPartitionNotSupported {
              get { return SR.GetResourceString("OneLevelPartitionNotSupported", @"Creation of single level application partition is not supported."); }
        }
        internal static string SiteNameNotFound {
              get { return SR.GetResourceString("SiteNameNotFound", @"Unable to obtain the site name of domain controller ""{0}""."); }
        }
        internal static string SiteObjectNameNotFound {
              get { return SR.GetResourceString("SiteObjectNameNotFound", @"Unable to obtain the distinguished name of the site object for domain controller ""{0}""."); }
        }
        internal static string ComputerObjectNameNotFound {
              get { return SR.GetResourceString("ComputerObjectNameNotFound", @"Unable to obtain the distinguished name of the computer object of domain controller ""{0}""."); }
        }
        internal static string ServerObjectNameNotFound {
              get { return SR.GetResourceString("ServerObjectNameNotFound", @"Unable to obtain the distinguished name of the server object of domain controller ""{0}""."); }
        }
        internal static string NtdsaObjectNameNotFound {
              get { return SR.GetResourceString("NtdsaObjectNameNotFound", @"Unable to obtain the distinguished name of the ntds settings object of domain controller ""{0}""."); }
        }
        internal static string NtdsaObjectGuidNotFound {
              get { return SR.GetResourceString("NtdsaObjectGuidNotFound", @"Unable to obtain the guid of the ntds settings object of domain controller ""{0}""."); }
        }
        internal static string OnlyDomainOrForest {
              get { return SR.GetResourceString("OnlyDomainOrForest", @"DirectoryContextType.Domain and DirectoryContextType.Forest are the only valid values for contextType when the name of the context is not specified."); }
        }
        internal static string ServerShouldBeDC {
              get { return SR.GetResourceString("ServerShouldBeDC", @"The specified directory server must be an Active Directory domain controller."); }
        }
        internal static string ServerShouldBeAI {
              get { return SR.GetResourceString("ServerShouldBeAI", @"The specified directory server must be an ADAM instance."); }
        }
        internal static string CannotModifySacl {
              get { return SR.GetResourceString("CannotModifySacl", @"The system acl cannot be modified as it was not retrieved from the backend store."); }
        }
        internal static string CannotModifyDacl {
              get { return SR.GetResourceString("CannotModifyDacl", @"The discretionary acl cannot be modified as it was not retrieved from the backend store."); }
        }
        internal static string ForestTrustCollision {
              get { return SR.GetResourceString("ForestTrustCollision", @"A collision occurred in the forest trust relationship."); }
        }
        internal static string ForestTrustDoesNotExist {
              get { return SR.GetResourceString("ForestTrustDoesNotExist", @"A forest trust relationship does not exist between ""{0}"" and ""{1}""."); }
        }
        internal static string DomainTrustDoesNotExist {
              get { return SR.GetResourceString("DomainTrustDoesNotExist", @"A domain trust relationship does not exist between ""{0}"" and ""{1}""."); }
        }
        internal static string WrongForestTrust {
              get { return SR.GetResourceString("WrongForestTrust", @"A forest trust relationship should not exist between ""{0}"" and ""{1}""."); }
        }
        internal static string WrongTrustDirection {
              get { return SR.GetResourceString("WrongTrustDirection", @"The trust relationship between ""{0}"" and ""{1}"" is not ""{2}""."); }
        }
        internal static string NT4NotSupported {
              get { return SR.GetResourceString("NT4NotSupported", @"Trust relationship with Windows NT 4.0 domain not supported."); }
        }
        internal static string KerberosNotSupported {
              get { return SR.GetResourceString("KerberosNotSupported", @"Operation for Kerberos type trust not supported."); }
        }
        internal static string DSPropertyListUnsupported {
              get { return SR.GetResourceString("DSPropertyListUnsupported", @"The provider does not support retrieval of the security descriptor in binary form."); }
        }
        internal static string DSMultipleSDNotSupported {
              get { return SR.GetResourceString("DSMultipleSDNotSupported", @"Multiple security descriptors for an object are not supported."); }
        }
        internal static string DSSDNoValues {
              get { return SR.GetResourceString("DSSDNoValues", @"ntSecurityDescriptor property exists in cache, but has no values."); }
        }
        internal static string ConnectionSourcServerShouldBeDC {
              get { return SR.GetResourceString("ConnectionSourcServerShouldBeDC", @"Must be the name of an Active Directory domain controller."); }
        }
        internal static string ConnectionSourcServerShouldBeADAM {
              get { return SR.GetResourceString("ConnectionSourcServerShouldBeADAM", @"Must be the name of an ADAM instance."); }
        }
        internal static string ConnectionSourcServerSameForest {
              get { return SR.GetResourceString("ConnectionSourcServerSameForest", @"Must be in the same Active Directory forest as the name specified in the directory context."); }
        }
        internal static string ConnectionSourcServerSameConfigSet {
              get { return SR.GetResourceString("ConnectionSourcServerSameConfigSet", @"Must be in the same ADAM Configuration Set as the name specified in the directory context."); }
        }
        internal static string TrustVerificationNotSupport {
              get { return SR.GetResourceString("TrustVerificationNotSupport", @"Trust verification not supported."); }
        }
        internal static string DSChildren {
              get { return SR.GetResourceString("DSChildren", @"The child entries of this node."); }
        }
        internal static string DSGuid {
              get { return SR.GetResourceString("DSGuid", @"The globally unique identifier of this entry."); }
        }
        internal static string DSName {
              get { return SR.GetResourceString("DSName", @"The name of the object as named with the service."); }
        }
        internal static string DSNativeObject {
              get { return SR.GetResourceString("DSNativeObject", @"The native ADSI object."); }
        }
        internal static string DSParent {
              get { return SR.GetResourceString("DSParent", @"The parent entry of this node."); }
        }
        internal static string DSPassword {
              get { return SR.GetResourceString("DSPassword", @"The password to use when authenticating the client."); }
        }
        internal static string DSPath {
              get { return SR.GetResourceString("DSPath", @"The path of this DirectoryEntry."); }
        }
        internal static string DSProperties {
              get { return SR.GetResourceString("DSProperties", @"Indicates the properties of this entry."); }
        }
        internal static string DSSchemaClassName {
              get { return SR.GetResourceString("DSSchemaClassName", @"The name of the schema for this entry."); }
        }
        internal static string DSSchemaEntry {
              get { return SR.GetResourceString("DSSchemaEntry", @"The DirectoryEntry that holds this entry schema."); }
        }
        internal static string DSUsePropertyCache {
              get { return SR.GetResourceString("DSUsePropertyCache", @"Specifies whether to use the ADSI property cache."); }
        }
        internal static string DSUsername {
              get { return SR.GetResourceString("DSUsername", @"The username to use when authenticating the client."); }
        }
        internal static string DSAuthenticationType {
              get { return SR.GetResourceString("DSAuthenticationType", @"Specifies authentication options used in ADSI for binding to directory service objects."); }
        }
        internal static string DSNativeGuid {
              get { return SR.GetResourceString("DSNativeGuid", @"The GUID text returned by the provider for this directory entry."); }
        }
        internal static string DSCacheResults {
              get { return SR.GetResourceString("DSCacheResults", @"Indicates whether the result should be cached on the client computer."); }
        }
        internal static string DSClientTimeout {
              get { return SR.GetResourceString("DSClientTimeout", @"The maximum time that the client waits for the server to return results."); }
        }
        internal static string DSPropertyNamesOnly {
              get { return SR.GetResourceString("DSPropertyNamesOnly", @"Indicates whether the search should retrieve only the names of requested properties or their names and values."); }
        }
        internal static string DSFilter {
              get { return SR.GetResourceString("DSFilter", @"Specifies the search criteria for this search."); }
        }
        internal static string DSPageSize {
              get { return SR.GetResourceString("DSPageSize", @"Sets the page size in a paged search."); }
        }
        internal static string DSPropertiesToLoad {
              get { return SR.GetResourceString("DSPropertiesToLoad", @"The set of properties retrieved during the search."); }
        }
        internal static string DSReferralChasing {
              get { return SR.GetResourceString("DSReferralChasing", @"Specifies how referrals are chased."); }
        }
        internal static string DSSearchScope {
              get { return SR.GetResourceString("DSSearchScope", @"The scope of the search that should be observed by the server."); }
        }
        internal static string DSServerPageTimeLimit {
              get { return SR.GetResourceString("DSServerPageTimeLimit", @"The maximum amount of time that the server should observe for page results (as opposed to the time limit for the entire search)."); }
        }
        internal static string DSServerTimeLimit {
              get { return SR.GetResourceString("DSServerTimeLimit", @"The maximum amount of time that the server should spend searching."); }
        }
        internal static string DSSizeLimit {
              get { return SR.GetResourceString("DSSizeLimit", @"The maximum number of objects that the server should return in a search."); }
        }
        internal static string DSSearchRoot {
              get { return SR.GetResourceString("DSSearchRoot", @"The node in the Active Directory hierarchy at which the search will start."); }
        }
        internal static string DSSort {
              get { return SR.GetResourceString("DSSort", @"The property on which the results should be sorted."); }
        }
        internal static string DSSortName {
              get { return SR.GetResourceString("DSSortName", @"The property name on which the results should be sorted."); }
        }
        internal static string DSSortDirection {
              get { return SR.GetResourceString("DSSortDirection", @"The direction in which the results should be sorted."); }
        }
        internal static string DSAsynchronous {
              get { return SR.GetResourceString("DSAsynchronous", @"Indicates if searches should be performed asynchronously."); }
        }
        internal static string DSTombstone {
              get { return SR.GetResourceString("DSTombstone", @"Indicates if the search should also return deleted objects that match the search filter."); }
        }
        internal static string DSAttributeQuery {
              get { return SR.GetResourceString("DSAttributeQuery", @"Specifies that an attribute-scoped query search should be performed."); }
        }
        internal static string DSDerefAlias {
              get { return SR.GetResourceString("DSDerefAlias", @"Specifies that aliases of found objects are to be resolved."); }
        }
        internal static string DSSecurityMasks {
              get { return SR.GetResourceString("DSSecurityMasks", @"Specifies that the search should return security access data for the specified attributes."); }
        }
        internal static string DSExtendedDn {
              get { return SR.GetResourceString("DSExtendedDn", @"Request an extended form of an Active Directory object distinguished name."); }
        }
        internal static string DSDirectorySynchronizationFlag {
              get { return SR.GetResourceString("DSDirectorySynchronizationFlag", @"The flag that directory synchronization search will use."); }
        }
        internal static string DSDirectorySynchronizationCookie {
              get { return SR.GetResourceString("DSDirectorySynchronizationCookie", @"The cookie returned from directory synchronization search."); }
        }
        internal static string DSDirectorySynchronization {
              get { return SR.GetResourceString("DSDirectorySynchronization", @"Specifies a directory synchronization search, which returns all changes since a specified state."); }
        }
        internal static string DSUnknown {
              get { return SR.GetResourceString("DSUnknown", @"Unknown error (0x{0})"); }
        }
        internal static string DSOptions {
              get { return SR.GetResourceString("DSOptions", @"Gets and Sets the options of this entry."); }
        }
        internal static string DSObjectSecurity {
              get { return SR.GetResourceString("DSObjectSecurity", @"The access control data for this directory entry. "); }
        }
        internal static string DirectoryEntryDesc {
              get { return SR.GetResourceString("DirectoryEntryDesc", @"Encapsulates a node or object in an Active Directory hierarchy."); }
        }
        internal static string DirectorySearcherDesc {
              get { return SR.GetResourceString("DirectorySearcherDesc", @"Performs queries against Active Directory."); }
        }
        internal static string OnlyAllowSingleDimension {
              get { return SR.GetResourceString("OnlyAllowSingleDimension", @"Only single dimensional arrays are supported for the requested action."); }
        }
        internal static string LessThanZero {
              get { return SR.GetResourceString("LessThanZero", @"Number was less than the array's lower bound in the first dimension."); }
        }
        internal static string DestinationArrayNotLargeEnough {
              get { return SR.GetResourceString("DestinationArrayNotLargeEnough", @"Destination array was not long enough. Check destIndex and length, and the array's lower bounds."); }
        }
        internal static string NoNegativeTime {
              get { return SR.GetResourceString("NoNegativeTime", @"A negative value is not permitted for the replication interval."); }
        }
        internal static string ReplicationIntervalExceedMax {
              get { return SR.GetResourceString("ReplicationIntervalExceedMax", @"The value exceeds the maximum allowed for replication interval."); }
        }
        internal static string ReplicationIntervalInMinutes {
              get { return SR.GetResourceString("ReplicationIntervalInMinutes", @"The value can not be represented in whole minutes."); }
        }
        internal static string TimespanExceedMax {
              get { return SR.GetResourceString("TimespanExceedMax", @"The value exceeds the maximum allowed."); }
        }

#endif
        internal static Type ResourceType {
              get { return typeof(FxResources.System.DirectoryServices.SR); }
        }
    }
}
namespace FxResources.System.DirectoryServices
{
    // The type of this class is used to create the ResourceManager instance as the type name matches the name of the embedded resources file
    internal static class SR
    {
    }
}
